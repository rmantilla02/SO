#!/bin/bash
# Installation command for CONTROL system.

controlName() {
	echo "   __________  _   ____________  ____  __ "
	echo "  / ____/ __ \/ | / /_  __/ __ \/ __ \/ / "
	echo " / /   / / / /  |/ / / / / /_/ / / / / /  "
	echo "/ /___/ /_/ / /|  / / / / _, _/ /_/ / /___"
	echo "\____/\____/_/ |_/ /_/ /_/ |_|\____/_____/"
	echo "                                          "
	echo "Copyright 2018 Â© Grupo 06                      "
}

checkInstalled() {
	if [ -f $GRUPO/.dirconf/installation.conf ]; then
		CONTROL_INSTALLED=1
	else
		CONTROL_INSTALLED=0
	fi
}

setVariables() {
	DIRECTORY_DUPLICATED=0
	EXE_FILES_DIR="$GRUPO/bin"
	MASTER_FILES_DIR="$GRUPO/master"
	ARRIVAL_DIR="$GRUPO/arrival"
	ACCEPTED_DIR="$GRUPO/accepted"
	REJECTED_DIR="$GRUPO/rejected"
	PROCESSED_DIR="$GRUPO/processed"
	REPORTS_DIR="$GRUPO/reports"
	LOGS_DIR="$GRUPO/logs"
}

currentConfiguration() {
	echo "The current configuration is: "

	while read linea; do

    	if [[ -z $linea ]]; then continue; fi
	
	    CONTROL_FOLDER=$(echo "$linea" | cut -d- -f1)
	    CONTROL_PATH=$(echo "$linea" | cut -d- -f2)
	
    	case "$CONTROL_FOLDER" in
    		library) echo "System library: $CONTROL_PATH";;
    	    ejecutables) echo "Executables files directory: $CONTROL_PATH";;
    	    maestros) echo "Master files directory: $CONTROL_PATH";;
    	    arribos) echo "Arrival files directory: $CONTROL_PATH";;
    	    aceptados) echo "Accepted files directory: $CONTROL_PATH";;
    	    rechazados) echo "Rejected files directory: $CONTROL_PATH";;
    	    procesados) echo "Processed files directoty $CONTROL_PATH";;
    	    reportes) echo "Reports directory: $CONTROL_PATH";;
    	    logs) echo "Logs directory: $CONTROL_PATH";;
    	esac

	done < "$DIRCONF/installation.conf"

	echo -e "Installation status: \e[0;32mINSTALLED\e[0m"
}

inputDirectory() {
	echo -n "Type the $2 directory, followed by [ENTER] (Default: ${!1}): "
	read INPUT

	TMP_DIR="${!1}"
	if [ "$INPUT" != "" ]; then
		TMP_DIR="$GRUPO/$INPUT"

		checkDuplicated "$TMP_DIR"
		while [ $DIRECTORY_DUPLICATED == 1 ]; do
			echo -n "The specified directory is already used, type a different one [ENTER] (Default: ${!1}): "
			read INPUT

			TMP_DIR="${!1}"
			if [ "$INPUT" != "" ]; then
				TMP_DIR="$GRUPO/$INPUT"
			fi
			checkDuplicated "$TMP_DIR"
		done
	
		eval "$1=$TMP_DIR"
	fi
}

updateDirectory() {
	echo -n "Actual $2 directory is ${!1}, would you like to change it [Y/N]? "

	while true; do
		read UPDATE_OPTION
		UPDATE_OPTION=${UPDATE_OPTION^^}
		
		if [[ "YES" == "$UPDATE_OPTION"* ]]; then
			inputDirectory $1 $2
			break
		elif [[ "NO" == "$UPDATE_OPTION"* ]]; then
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done
}

checkDuplicated() {
	DIRECTORY_DUPLICATED=0

	if [ "$1" == "$DIRCONF" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$EXE_FILES_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$MASTER_FILES_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$ARRIVAL_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$ACCEPTED_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$REJECTED_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$PROCESSED_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$REPORTS_DIR" ]; then DIRECTORY_DUPLICATED=1
	elif [ "$1" == "$LOGS_DIR" ]; then DIRECTORY_DUPLICATED=1
	fi
}

loadingBar() {
	for it in $(seq 1 40); do 
		echo -n "-"
		sleep 0.025
	done
	echo ">"
	unset it
}

creationLoader() {
	for it in $(seq 1 3); do 
		echo -n "."
		sleep 0.333
	done
	echo ""
}

actualConfiguration() {
	echo "The current configuration is: "
	echo "System library: $DIRCONF"
	echo "Executables files directory: $EXE_FILES_DIR"
	echo "Master files directory: $MASTER_FILES_DIR"
	echo "Arrival files directory: $ARRIVAL_DIR"
	echo "Accepted files directory: $ACCEPTED_DIR"
	echo "Rejected files directory: $REJECTED_DIR"
	echo "Processed files directoty $PROCESSED_DIR"
	echo "Reports directory: $REPORTS_DIR"
	echo "Logs directory: $LOGS_DIR"
	echo -e "Installation status: \e[0;33mWAITING FOR CONFIRMATION\e[0m"
	echo -n "Do you want to continue [Y/N]? "

	while true; do
		read INPUT
		INPUT=${INPUT^^}

		if [[ "YES" == "$INPUT"* ]]; then
			CONFIG_ACCEPTED=1
			break
		elif [[ "NO" == "$INPUT"* ]]; then
			CONFIG_ACCEPTED=0
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done
	
}

firstDataInput() {
	PERL_VERSION=$(perl -v | grep "This is perl *"  | sed 's-\(.*\)(v\(.*\))\(.*\)-\2-g')
	if ((${PERL_VERSION:0:1} < 5)); then
		echo "An upgrade in PERL is required to continue with the software installation. Please, install at lease PERL 5.0.0 and try again later (maybe using sudo apt-get perl)."
		CONTROL_INSTALLATION=1
	fi

	if [ ! -d "$HOME/Grupo06" ]; then
  		mkdir $GRUPO
	fi

	inputDirectory EXE_FILES_DIR "executables files"
	inputDirectory MASTER_FILES_DIR "master files"
	inputDirectory ARRIVAL_DIR "arrival files"
	inputDirectory ACCEPTED_DIR "accepted files"
	inputDirectory REJECTED_DIR "rejected files"
	inputDirectory PROCESSED_DIR "processed files"
	inputDirectory REPORTS_DIR "reports"
	inputDirectory LOGS_DIR "logs"

	loadingBar
	actualConfiguration
}

updateDataInput() {
	updateDirectory EXE_FILES_DIR "executables files"
	updateDirectory MASTER_FILES_DIR "master files"
	updateDirectory ARRIVAL_DIR "arrival files"
	updateDirectory ACCEPTED_DIR "accepted files"
	updateDirectory REJECTED_DIR "rejected files"
	updateDirectory PROCESSED_DIR "processed files"
	updateDirectory REPORTS_DIR "reports"
	updateDirectory LOGS_DIR "logs"

	loadingBar
	actualConfiguration
}

createDirectories() {
	mkdir -p $DIRCONF
	echo -n "Creating system library"
	creationLoader

	mkdir -p $EXE_FILES_DIR
	echo -n "Creating executables files directory"
	creationLoader

	mkdir -p $MASTER_FILES_DIR
	echo -n "Creating master files directory"
	creationLoader
	
	mkdir -p $ARRIVAL_DIR
	echo -n "Creating arrival files directory"
	creationLoader

	mkdir -p $ACCEPTED_DIR
	echo -n "Creating accepted files directory"
	creationLoader

	mkdir -p $REJECTED_DIR
	echo -n "Creating rejected files directory"
	creationLoader

	mkdir -p $PROCESSED_DIR
	echo -n "Creating processed files directory"
	creationLoader

	mkdir -p $REPORTS_DIR
	echo -n "Creating reports directory"
	creationLoader

	mkdir -p $LOGS_DIR
	echo -n "Creating logs directory"
	creationLoader
}

movingFiles() {
	if [ "$(ls -A files/master)" ]; then
		cp files/master/* $MASTER_FILES_DIR/
		echo -n "Copying master files"
		creationLoader
	fi

	if [ "$(ls -A files/tables)" ]; then
		cp files/tables/* $MASTER_FILES_DIR/
		echo -n "Copying tables"
		creationLoader
	fi

	if [ "$(ls -A files/executables)" ]; then
		cp files/executables/* $EXE_FILES_DIR/
		echo -n "Copying executables files"
		creationLoader
	fi
}

createConfigurationFile() {
	touch $DIRCONF/installation.conf

	echo "ejecutables-$EXE_FILES_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "maestros-$MASTER_FILES_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "arribos-$ARRIVAL_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "aceptados-$ACCEPTED_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "rechazados-$REJECTED_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "procesados-$PROCESSED_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "reportes-$REPORTS_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo "logs-$LOGS_DIR-$(whoami)-$(date "+%F %T")" >> $DIRCONF/installation.conf
	echo -n "Creating configuration file"
	creationLoader
}

runInstallation() {
	echo "Your directory structure will be generated in $HOME/Grupo06."
	setVariables

	loadingBar
	firstDataInput

	while [ $CONFIG_ACCEPTED == 0 ]; do
		loadingBar
		updateDataInput
	done

	loadingBar
	createDirectories
	movingFiles
	createConfigurationFile
	loadingBar

	echo "Installation completed!"
}

cleanDirectory() {
	rm -rf $GRUPO
	echo "The destination directory was succesfully cleaned."
}

repairingMode() {
	echo "The installation manager is running in the repairing mode."
	echo "Every file previously used by the system (including reports) will be lost."
	echo "If you want to keep any source file, move them to their corresponding folder (master, tables or executables) in the package files folder."
	echo "In case you want to keep any output file (like reports), procceed with their respective backup."
	echo -n "Do you want to continue [Y/N]? "

	while true; do
		read REPAIR_OPTION
		REPAIR_OPTION=${REPAIR_OPTION^^}
		
		if [[ "YES" == "$REPAIR_OPTION"* ]]; then
			loadingBar
			cleanDirectory
			runInstallation
			break
		elif [[ "NO" == "$REPAIR_OPTION"* ]]; then
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done
}

controlName
echo "Welcome to the CONTROL installation wizard."
GRUPO="$HOME/Grupo06"
DIRCONF="$HOME/Grupo06/.dirconf"

if [ "$1" == "-r" ]; then
	repairingMode
else
	checkInstalled
	if [ $CONTROL_INSTALLED == 1 ]; then
		echo "The CONTROL System is already installed in this environment. If you want to repair it, please try with \"install -r\"."
		loadingBar
		currentConfiguration
	else
		runInstallation
	fi
fi	