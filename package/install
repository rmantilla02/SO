#!/bin/bash
# Installation command for CONTROL system.
export GRUPO="$HOME/Grupo06"
export DIRCONF="$GRUPO/.dirconf"
LOGS_DIRECTORY=$DIRCONF
LOGFILE="install"
source ./files/executables/log

controlName() {
	echo "   __________  _   ____________  ____  __       _______  _____________________  ___"
	echo "  / ____/ __ \/ | / /_  __/ __ \/ __ \/ /      / ___/\ \/ / ___/_  __/ ____/  |/  /"
	echo " / /   / / / /  |/ / / / / /_/ / / / / /       \__ \  \  /\__ \ / / / __/ / /|_/ / "
	echo "/ /___/ /_/ / /|  / / / / _, _/ /_/ / /___    ___/ /  / /___/ // / / /___/ /  / /  "
	echo "\____/\____/_/ |_/ /_/ /_/ |_|\____/_____/   /____/  /_//____//_/ /_____/_/  /_/   "
    echo "                                          										 "
	echo "Copyright 2018 Â© Grupo 06                 										 "
}

checkInstalled() {
	if [ -f $GRUPO/.dirconf/installation.conf ]; then
		info "checkInstalled" "There was found a previos installation of the Control System."
		CONTROL_INSTALLED=1
	else
		info "checkInstalled" "There was not found a previos installation of the Control System."
		CONTROL_INSTALLED=0
	fi
}

setVariables() {
	DIRECTORY_DUPLICATED=0
	EXE_FILES_DIR="$GRUPO/bin"
	MASTER_FILES_DIR="$GRUPO/master"
	ARRIVAL_DIR="$GRUPO/arrival"
	ACCEPTED_DIR="$GRUPO/accepted"
	REJECTED_DIR="$GRUPO/rejected"
	PROCESSED_DIR="$GRUPO/processed"
	REPORTS_DIR="$GRUPO/reports"
	LOGS_DIR="$GRUPO/logs"
}

currentConfiguration() {
	echo "The current configuration is: "
	info "currentConfiguration" "Printing the current configuration."

	while read linea; do

    	if [[ -z $linea ]]; then continue; fi
	
	    CONTROL_FOLDER=$(echo "$linea" | cut -d- -f1)
	    CONTROL_PATH=$(echo "$linea" | cut -d- -f2)
	
    	case "$CONTROL_FOLDER" in
    		System) echo "System library: $CONTROL_PATH";;
    	    Executables) echo "Executables files directory: $CONTROL_PATH";;
    	    Master) echo "Master files directory: $CONTROL_PATH";;
    	    Arrival) echo "Arrival files directory: $CONTROL_PATH";;
    	    Accepted) echo "Accepted files directory: $CONTROL_PATH";;
    	    Rejected) echo "Rejected files directory: $CONTROL_PATH";;
    	    Processed) echo "Processed files directoty $CONTROL_PATH";;
    	    Reports) echo "Reports directory: $CONTROL_PATH";;
    	    Logs) echo "Logs directory: $CONTROL_PATH";;
    	esac

	done < "$DIRCONF/installation.conf"

	echo -e "Installation status: \e[0;32mINSTALLED\e[0m"
}

inputDirectory() {
	echo -n "Type the $2 directory, followed by [ENTER] (Default: ${!1}): "
	read INPUT
	
	TMP_DIR="${!1}"
	if [ "$INPUT" != "" ]; then
		info "inputDirectory" "User inserted the path $INPUT."
		TMP_DIR="$GRUPO/$INPUT"

		checkDuplicated "$TMP_DIR" "${!1}"
		while [ $DIRECTORY_DUPLICATED == 1 ]; do
			warn "inputDirectory" "User must retype the path because it was duplicated."
			echo -n "The specified directory is already used, type a different one [ENTER] (Default: ${!1}): "
			read INPUT

			TMP_DIR="${!1}"
			if [ "$INPUT" != "" ]; then
				TMP_DIR="$GRUPO/$INPUT"
			fi
			checkDuplicated "$TMP_DIR" "${!1}"
		done
	
		eval "$1=$TMP_DIR"
	else
		info "inputDirectory" "User skipped the path."
	fi
}

updateDirectory() {
	echo -n "Actual $2 directory is ${!1}, would you like to change it [Y/N]? "

	while true; do
		read UPDATE_OPTION
		UPDATE_OPTION=${UPDATE_OPTION^^}
		
		if [[ "YES" == "$UPDATE_OPTION"* ]]; then
			inputDirectory $1 $2
			break
		elif [[ "NO" == "$UPDATE_OPTION"* ]]; then
			log "User skipped the update."
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done
}

checkDuplicated() {
	DIRECTORY_DUPLICATED=0

	if [ "$1" == "$DIRCONF" -a "$DIRCONF" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with System directory)."
	elif [ "$1" == "$EXE_FILES_DIR" -a "$EXE_FILES_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Executables directory)."
	elif [ "$1" == "$MASTER_FILES_DIR" -a "$MASTER_FILES_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Master directory)."
	elif [ "$1" == "$ARRIVAL_DIR" -a "$ARRIVAL_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Arrival directory)."
	elif [ "$1" == "$ACCEPTED_DIR" -a "$ACCEPTED_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Accepted directory)."
	elif [ "$1" == "$REJECTED_DIR" -a "$REJECTED_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Rejected directory)."
	elif [ "$1" == "$PROCESSED_DIR" -a "$PROCESSED_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Processed directory)."
	elif [ "$1" == "$REPORTS_DIR" -a "$REPORTS_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Reports directory)."
	elif [ "$1" == "$LOGS_DIR" -a "$LOGS_DIR" != "$2" ]; then DIRECTORY_DUPLICATED=1; warn "checkDuplicated" "Input directory duplicated (with Logs directory)."
	fi
}

loadingBar() {
	for it in $(seq 1 40); do 
		echo -n "-"
		sleep 0.025
	done
	echo ">"
	unset it
}

creationLoader() {
	for it in $(seq 1 3); do 
		echo -n "."
		sleep 0.333
	done
	echo ""
}

actualConfiguration() {
	echo "The current configuration is: "
	echo "System library: $DIRCONF"
	echo "Executables files directory: $EXE_FILES_DIR"
	echo "Master files directory: $MASTER_FILES_DIR"
	echo "Arrival files directory: $ARRIVAL_DIR"
	echo "Accepted files directory: $ACCEPTED_DIR"
	echo "Rejected files directory: $REJECTED_DIR"
	echo "Processed files directoty $PROCESSED_DIR"
	echo "Reports directory: $REPORTS_DIR"
	echo "Logs directory: $LOGS_DIR"
	echo -e "Installation status: \e[0;33mWAITING FOR CONFIRMATION\e[0m"
	echo -n "Do you want to continue [Y/N]? "
	info "actualConfiguration" "Actual configuration showed."

	while true; do
		read INPUT
		INPUT=${INPUT^^}

		if [[ "YES" == "$INPUT"* ]]; then
			CONFIG_ACCEPTED=1
			break
		elif [[ "NO" == "$INPUT"* ]]; then
			CONFIG_ACCEPTED=0
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done
	
}

firstDataInput() {
	PERL_VERSION=$(perl -v | grep "This is perl *"  | sed 's-\(.*\)(v\(.*\))\(.*\)-\2-g')
	if ((${PERL_VERSION:0:1} < 5)); then
		error "firstDataInput" "The Perl version installed is v$PERL_VERSION, and this program requires at least the version 5.0.0"
		echo "An upgrade in PERL is required to continue with the software installation. Please, install at lease PERL 5.0.0 and try again later (maybe using sudo apt-get perl)."
		CONTROL_INSTALLATION=1
	fi

	info "firstDataInput" "User will insert the executables files path."
	inputDirectory EXE_FILES_DIR "executables files"
	info "firstDataInput" "User will insert the master files path."
	inputDirectory MASTER_FILES_DIR "master files"
	info "firstDataInput" "User will insert the arrival files path."
	inputDirectory ARRIVAL_DIR "arrival files"
	info "firstDataInput" "User will insert the accepted files path."
	inputDirectory ACCEPTED_DIR "accepted files"
	info "firstDataInput" "User will insert the rejected files path."
	inputDirectory REJECTED_DIR "rejected files"
	info "firstDataInput" "User will insert the processed files path."
	inputDirectory PROCESSED_DIR "processed files"
	info "firstDataInput" "User will insert the reports path."
	inputDirectory REPORTS_DIR "reports"
	info "firstDataInput" "User will insert the logs path."
	inputDirectory LOGS_DIR "logs"

	loadingBar
	actualConfiguration
}

updateDataInput() {
	info "updateDataInput" "User will update the executables files path."
	updateDirectory EXE_FILES_DIR "executables files"
	info "updateDataInput" "User will update the master files path."
	updateDirectory MASTER_FILES_DIR "master files"
	info "updateDataInput" "User will update the arrival files path."
	updateDirectory ARRIVAL_DIR "arrival files"
	info "updateDataInput" "User will update the accepted files path."
	updateDirectory ACCEPTED_DIR "accepted files"
	info "updateDataInput" "User will update the rejected files path."
	updateDirectory REJECTED_DIR "rejected files"
	info "updateDataInput" "User will update the processed files path."
	updateDirectory PROCESSED_DIR "processed files"
	info "updateDataInput" "User will update the reports path."
	updateDirectory REPORTS_DIR "reports"
	info "updateDataInput" "User will update the logs path."
	updateDirectory LOGS_DIR "logs"

	loadingBar
	actualConfiguration
}

createDirectories() {
	info "createDirectories" "System directory created at $DIRCONF."
	echo -n "Creating system library"
	creationLoader

	mkdir -p $EXE_FILES_DIR
	info "createDirectories" "Executables files directory created at $EXE_FILES_DIR."
	echo -n "Creating executables files directory"
	creationLoader

	mkdir -p $MASTER_FILES_DIR
	info "createDirectories" "Master files directory created at $MASTER_FILES_DIR."
	echo -n "Creating master files directory"
	creationLoader
	
	mkdir -p $ARRIVAL_DIR
	info "createDirectories" "Arrival files directory created at $ARRIVAL_DIR."
	echo -n "Creating arrival files directory"
	creationLoader

	mkdir -p $ACCEPTED_DIR
	info "createDirectories" "Accepted files directory created at $ACCEPTED_DIR."
	echo -n "Creating accepted files directory"
	creationLoader

	mkdir -p $REJECTED_DIR
	info "createDirectories" "Rejected files directory created at $REJECTED_DIR."
	echo -n "Creating rejected files directory"
	creationLoader

	mkdir -p $PROCESSED_DIR
	info "createDirectories" "Processed files directory created at $PROCESSED_DIR."
	echo -n "Creating processed files directory"
	creationLoader

	mkdir -p $REPORTS_DIR
	info "createDirectories" "Reports directory created at $REPORTS_DIR."
	echo -n "Creating reports directory"
	creationLoader

	mkdir -p $LOGS_DIR
	info "createDirectories" "Logs directory created at $LOGS_DIR."
	echo -n "Creating logs directory"
	creationLoader
}

movingFiles() {
	if [ "$(ls -A files/master)" ]; then
		cp files/master/* $MASTER_FILES_DIR/
		info "movingFiles" "Existing master files moved to $MASTER_FILES_DIR."
		echo -n "Copying master files"
		creationLoader
	else
		info "movingFiles" "There was not any master files to move to $MASTER_FILES_DIR."
	fi

	if [ "$(ls -A files/tables)" ]; then
		cp files/tables/* $MASTER_FILES_DIR/
		info "movingFiles" "Existing tables files moved to $MASTER_FILES_DIR."
		echo -n "Copying tables"
		creationLoader
	else
		info "movingFiles" "There was not any tables files to move to $MASTER_FILES_DIR."
	fi

	if [ "$(ls -A files/executables)" ]; then
		cp files/executables/* $EXE_FILES_DIR/
		info "movingFiles" "Existing executables files moved to $EXE_FILES_DIR."
		echo -n "Copying executables files"
		creationLoader
	else
		info "movingFiles" "There was not any executables files to move to $EXE_FILES_DIR."
	fi
}

createConfigurationFile() {
	touch $DIRCONF/installation.conf
	info "createConfigurationFile" "Installation configuration file created."

	echo "Executables-$EXE_FILES_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Executables files directory wrote to installation configuration file."
	echo "Master-$MASTER_FILES_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Master files directory wrote to installation configuration file."
	echo "Arrival-$ARRIVAL_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Arrival files directory wrote to installation configuration file."
	echo "Accepted-$ACCEPTED_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Accepted files directory wrote to installation configuration file."
	echo "Rejected-$REJECTED_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Rejected files directory wrote to installation configuration file."
	echo "Processed-$PROCESSED_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Processed files directory wrote to installation configuration file."
	echo "Reports-$REPORTS_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Reports directory wrote to installation configuration file."
	echo "Logs-$LOGS_DIR-$(whoami)-$(date "+%d/%m/%Y %H:%M:%s")" >> $DIRCONF/installation.conf
	info "createConfigurationFile"  "Logs directory wrote to installation configuration file."
	echo -n "Creating configuration file"
	info "createConfigurationFile"  "Installation configuration file succesfully wrote."
	creationLoader
}

runInstallation() {
	echo "Your directory structure will be generated in $HOME/Grupo06."
	setVariables

	loadingBar
	firstDataInput
	info "runInstallation" "Input directories were defined."

	while [ $CONFIG_ACCEPTED == 0 ]; do
		loadingBar
		updateDataInput
		log "Input directories were updated."
	done

	loadingBar
	createDirectories
	movingFiles
	createConfigurationFile
	loadingBar

	echo "Installation completed!"
	info "runInstallation"  "Installation finished."
}

cleanDirectory() {
	rm -rf $GRUPO
	info "cleanDirectory" "The current installation environment was cleaned."
	echo "The destination directory was succesfully cleaned."
}

repairingMode() {
	echo "The installation manager is running in the repairing mode."
	echo "Every file previously used by the system (including reports) will be lost."
	echo "If you want to keep any source file, move them to their corresponding folder (master, tables or executables) in the package files folder."
	echo "In case you want to keep any output file (like reports), procceed with their respective backup."
	echo -n "Do you want to continue [Y/N]? "

	while true; do
		read REPAIR_OPTION
		REPAIR_OPTION=${REPAIR_OPTION^^}
		
		if [[ "YES" == "$REPAIR_OPTION"* ]]; then
			info "repairingMode"  "User selected to repair current installation."
			loadingBar
			cleanDirectory
			init
			runInstallation
			break
		elif [[ "NO" == "$REPAIR_OPTION"* ]]; then
			info "repairingMode" "User selected not to repair current installation."
			break
		else
			echo -n "Wrong option. Retype [Y/N]: "
		fi
	done

	info "repairingMode"  "Repair finished."
}

function init() {
	if [ ! -d "$GRUPO" ]; then mkdir $GRUPO; fi
	if [ ! -d "$DIRCONF" ]; then mkdir $DIRCONF; fi
}

init
info "main" "Installation wizard started."
controlName
echo "Welcome to the CONTROL installation wizard."
info "main" "Local variable GRUPO seted at $HOME/Grupo06"
info "main" "Local variable DIRCONF seted at $HOME/Grupo06/.dirconf"

if [ "$1" == "-r" ]; then
	info "main"  "The program will run in repair mode."
	repairingMode
else
	checkInstalled
	if [ $CONTROL_INSTALLED == 1 ]; then
		echo "The CONTROL System is already installed in this environment. If you want to repair it, please try with \"install -r\"."
		loadingBar
		currentConfiguration
	else
		runInstallation
	fi
fi