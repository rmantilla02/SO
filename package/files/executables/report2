#!/usr/bin/perl
use DateTime;
use Try::Tiny;
use Term::ANSIColor;

my $GRUPO;
my $DIRCONF;
my $EXECUTABLES;
my $ARRIVAL;
my $ACCEPTED;
my $REJECTED;
my $PROCESSED;
my $REPORTS;
my $LOGS;

sub ImportVariables {
	$GRUPO = $ENV{'GRUPO'};
	$DIRCONF = $ENV{'DIRCONF'};
	$EXECUTABLES = $ENV{'EXECUTABLES'};
	$ARRIVAL = $ENV{'ARRIVAL'};
	$ACCEPTED = $ENV{'ACCEPTED'};
	$REJECTED = $ENV{'REJECTED'};
	$PROCESSED = $ENV{'PROCESSED'};
	$REPORTS = $ENV{'REPORTS'};
	$LOGS = $ENV{'LOGS'};
}

sub processBeginDate {
	my $FROM_DATE;
	$BEGINNING = $_[0];
	$TODAY = DateTime -> now;
	$DATES_OK = 0;

	while ($BEGINNING && !$DATES_OK) {
		try {
			$FROM_DATE = DateTime -> new (year => substr($BEGINNING, 0, 4), month => substr($BEGINNING, 5, 2), day => substr($BEGINNING, 8, 2));
			if ($FROM_DATE > $TODAY) { die "Begin date must be before today."; }
			$DATES_OK = 1;
		} catch {
			print color('red');
			print "There was an error in the date entered.\n";
			print color('reset');
			print "Remember that the begin date must be before today.\n";
			print "Reenter the date (YYYY-MM-DD) [ENTER]: ";
			$BEGINNING = <STDIN>;
			chomp($BEGINNING);
		};
	}

	return $FROM_DATE;
}

sub processEndDate {
	my $TO_DATE;
	$ENDING = $_[0];
	$FROM_DATE = $_[1];
	$TODAY = DateTime -> now;
	$DATES_OK = 0;

	while ($ENDING && !$DATES_OK) {
		try {
			$TO_DATE = DateTime -> new (year => substr($ENDING, 0, 4), month => substr($ENDING, 5, 2), day => substr($ENDING, 8, 2));
			if ($TO_DATE > $TODAY) { die "End date must be before today."; }
			if ($FROM_DATE > $TO_DATE) { die "End date must be after begin date."; }
			$DATES_OK = 1;
		} catch {
			print color('red');
			print "There was an error in the date entered.\n";
			print color('reset');
			print "Remember that the end date must be after the begin date but before today.\n";
			print "Reenter the previous date (YYYY-MM-DD) [ENTER]: ";
			$ENDING = <STDIN>;
			chomp($ENDING);
		};
	}

	return $TO_DATE;
}

sub saveComparisson {
	print "Enter the country code [ENTER]: ";
	$COUNTRY_CODE = <STDIN>;
	chomp($COUNTRY_CODE);
	print "Enter the system code [ENTER] (Default: every system): ";
	$SYSTEM_CODE = <STDIN>;
	chomp($SYSTEM_CODE);
	
	print "Enter the beginning date of the date range (YYYY-MM-DD) [ENTER] (Default: Beginning of Time): ";
	$BEGINNING = <STDIN>;
	chomp($BEGINNING);
	$FROM_DATE = processBeginDate($BEGINNING);

	print "Enter the ending date of the date range (YYYY-MM-DD) [ENTER] (Default: Judgment Day): ";
	$ENDING = <STDIN>;
	chomp($ENDING);
	$TO_DATE = processEndDate($ENDING, $FROM_DATE);

	if (!$FROM_DATE) { $FROM_DATE = DateTime -> new (year => 9999, month => 12, day => 31); }
}

sub showHelp {
	print "Welcome to the Report Manager System.\n";
	print "Before you access the comparative system, you must save the current comparisson state by running '.report/ -g'.\n";
	print "After you properly set the comparisson state, you can calculate the divergences by percentage and by price just by accesing the report system without any parameter (run './report').\n";
	print "To get the divergences report, you must specify at leaste the country which data you want to process. You can also provide the system and a date range if you want more specific information.\n";
}

sub executeReportManager {
	print "Executing report manager.\n";
}

ImportVariables();

if (! $GRUPO) {
	print "The current system hasn't been initialized yet. Please, go to the executable folder and run '. ./start'.\n"
} else {
	if ($ARGV[0] eq "-g") { saveComparisson(); } 
	elsif ($ARGV[0] eq "-a") { showHelp(); } 
	elsif ($ARGV[0] eq "") { executeReportManager(); }
	else { print "Invalid calling argument. Please execute './report -a' to show the program help guide.\n"; }
}